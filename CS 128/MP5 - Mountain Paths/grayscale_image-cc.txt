#include "grayscale_image.hpp"

#include <cmath>
#include <fstream>
#include <iostream>

using namespace std;

GrayscaleImage::GrayscaleImage(const ElevationDataset& dataset) {
  width_ = dataset.Width();
  height_ = dataset.Height();

  vector<vector<Color>> map_prep;
  vector<Color> map_filler;
  int shade = 0;

  for (unsigned int i = 0; i < height_; i++) {
    for (unsigned int j = 0; j < width_; j++) {
      if (dataset.MaxEle() - dataset.MinEle() == 0) {
        shade = 0;
      } else {
        shade =
          (int)round((double)(dataset.DatumAt(j, i) - dataset.MinEle()) /
                     (double)(dataset.MaxEle() - dataset.MinEle()) * (double)kMaxColorValue);
      }
      
                     // std::cout << shade << std::endl;
      map_filler.push_back(Color(shade, shade, shade));
    }

    map_prep.push_back(map_filler);
    map_filler.clear();
  }

  image_ = map_prep;
}

GrayscaleImage::GrayscaleImage(const std::string& filename,
                               size_t width,
                               size_t height) {
  ElevationDataset dataset = ElevationDataset(filename, width, height);

  width_ = dataset.Width();
  height_ = dataset.Height();

  vector<vector<Color>> map_prep;
  vector<Color> map_filler;
  int shade = 0;

  for (unsigned int i = 0; i < height_; i++) {
    for (unsigned int j = 0; j < width_; j++) {
      if (dataset.MaxEle() - dataset.MinEle() == 0) {
        shade = 0;
      } else {
        shade =
          (int)round((double)(dataset.DatumAt(j, i) - dataset.MinEle()) /
                     (double)(dataset.MaxEle() - dataset.MinEle()) * (double)kMaxColorValue);
      }
                    // std::cout << shade << std::endl;
      map_filler.push_back(Color(shade, shade, shade));
    }

    map_prep.push_back(map_filler);
    map_filler.clear();
  }

  image_ = map_prep;
}

size_t GrayscaleImage::Width() const { return width_; }
size_t GrayscaleImage::Height() const { return height_; }

unsigned int GrayscaleImage::MaxColorValue() const { return kMaxColorValue; }

const Color& GrayscaleImage::ColorAt(int row, int col) const {
  return image_[col][row];
}

const vector<vector<Color>>& GrayscaleImage::GetImage() const { return image_; }

void GrayscaleImage::ToPpm(const string& name) const {
  ofstream ofs(name);
  ofs << "P3" << endl;
  ofs << width_ << " " << height_ << endl;
  ofs << kMaxColorValue << endl;

  for (unsigned int i = 0; i < height_; i++) {
    for (unsigned int j = 0; j < width_; j++) {
      Color checker = image_[i][j];
      ofs << checker.Red() << " " << checker.Green() << " " << checker.Blue()
          << " ";
    }
    ofs << endl;
  }
}
