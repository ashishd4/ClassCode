#include "elevation_dataset.hpp"

#include <fstream>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

vector<int> MaxMinFinder(vector<vector<int>> numbers) {
  vector<int> answers;
  int max = numbers[0][0];
  int min = numbers[0][0];
  for (unsigned int j = 0; j < numbers.size(); j++) {
    for (unsigned int i = 0; i < numbers[0].size(); i++) {
      if (numbers[j][i] > max) {
        max = numbers[j][i];
      }
      if (numbers[j][i] < min) {
        min = numbers[j][i];
      }
    }
  }

  answers.push_back(max);
  answers.push_back(min);

  return answers;
}

ElevationDataset::ElevationDataset(const string& filename, size_t width, size_t height): width_(width), height_(height) {
  vector<vector<int>> elevations;
  vector<int> filler;
  string number;
  vector<int> all_nums;

  ifstream ifs(filename);

  while (ifs >> number) {
      all_nums.push_back(stoi(number));
  }
  
  if (all_nums.size() != (width * height)) {
    throw runtime_error("Improper number of data points");
  }

  for (unsigned int j = 0; j < height; j++) {
    for (unsigned int i = 0; i < width; i++) {
      filler.push_back(all_nums[i + j * width]);
    }
    elevations.push_back(filler);
    filler.clear();
  }

  data_ = elevations;

  max_ele_ = MaxMinFinder(elevations)[0];
  min_ele_ = MaxMinFinder(elevations)[1];
}

size_t ElevationDataset::Width() const { return width_; }
size_t ElevationDataset::Height() const { return height_; }

int ElevationDataset::MaxEle() const { return max_ele_; }
int ElevationDataset::MinEle() const { return min_ele_; }

int ElevationDataset::DatumAt(size_t row, size_t col) const {
  return data_[col][row];
}

const vector<vector<int>>& ElevationDataset::GetData() const { return data_; }
