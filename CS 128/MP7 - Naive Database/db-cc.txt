#include "db.hpp"

void Database::CreateTable(const std::string& table_name) { // DONE
  tables_.insert({table_name, new DbTable()});
}

void Database::DropTable(const std::string& table_name) { // FIX
  bool not_found = true;

  for (auto const& [key, value] : tables_) {
    if (key == table_name) {
      delete value;
      not_found = false;
    }
  }
  
  if (!not_found) {
    tables_.erase(table_name);
  } else {
    throw std::runtime_error("Invalid Drop Table input");
  }
}

DbTable& Database::GetTable(const std::string& table_name) { // done?
  return *(tables_.at(table_name));
}

Database::Database(const Database& rhs) { 
  for (auto const& [key, value] : rhs.tables_) {
    tables_.insert({key, new DbTable(*value)});
  }
}

Database& Database::operator=(const Database& rhs) { // FIX
  if (this == &rhs) {
      return *this;
  }

  // insert destructor here
  for (auto const& [key, value] : tables_) {
    delete value;
  }
  tables_.clear();

  for (auto const& [key, value] : rhs.tables_) {
    auto* new_val = new DbTable(*value);
    tables_.insert({key, new_val});
  }

  return *this;
}

Database::~Database() {
  for (auto const& [key, value] : tables_) {
    delete value;
  }
  tables_.clear();
}