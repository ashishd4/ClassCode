// clang-format off
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//  Written By : Michael R. Nowak                Environment : ubuntu:latest               //
//  Date ......: 2022/02/07                      Compiler ...: clang-10                    //
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
// clang-format on
/////////////////////////////////////////////////////////////////////////////////////////////
//                             Framework Set-up //
/////////////////////////////////////////////////////////////////////////////////////////////
#ifndef CATCH_CONFIG_MAIN
#  define CATCH_CONFIG_MAIN
#endif
#include "catch.hpp"

/////////////////////////////////////////////////////////////////////////////////////////////
//                                 Includes //
/////////////////////////////////////////////////////////////////////////////////////////////
#include <stdexcept>

#include "board.hpp"

/////////////////////////////////////////////////////////////////////////////////////////////
//                             Helpers/Constants //
/////////////////////////////////////////////////////////////////////////////////////////////
constexpr int kBoardWidth = 7;
constexpr int kBoardHeight = 6;  // originally 6

bool AreEqual(DiskType solution[][kBoardWidth],
              DiskType student[][kBoardWidth]) {
  for (int i = 0; i < kBoardHeight; ++i) {
    for (int j = 0; j < kBoardWidth; ++j) {
      if (solution[i][j] != student[i][j]) return false;
    }
  }
  return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////
//                                Test Cases //
/////////////////////////////////////////////////////////////////////////////////////////////

TEST_CASE("Board initialization", "[board_init]") {
  // SECTION("Can use sections") {}
  // clang-format off
  DiskType solution[kBoardHeight][kBoardWidth] = { 
    {DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty}, 
    {DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty}, 
    {DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty}, 
    {DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty}, 
    {DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty}, 
    {DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty, DiskType::kEmpty} 
  };
  // clang-format on
  Board student;  // NOLINT
  InitBoard(student);
  REQUIRE(AreEqual(solution, student.board));  // trash

  solution[0][0] = DiskType::kPlayer1;

  // REQUIRE_THROWS_AS(DropDiskToBoard(student, DiskType::kPlayer2, 7),  //
  // trash
  //                   std::runtime_error);
  REQUIRE_THROWS_AS(
      DropDiskToBoard(student, DiskType::kPlayer2, -1),  // Bad #10
      std::runtime_error);

  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 1));  // 1
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 1));  // 2
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 1));  // 3
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 1));  // 4
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 1));  // 5
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 1));  // 6

  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer2, 2));  // 1
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer2, 2));  // 2
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 2));  // 3
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer2, 2));  // 4
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 2));  // 5
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer2, 2));  // 6

  /**
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 2));  // 2
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 2));  // 3
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 2));  // 4
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 2));  // 5
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 2));  // 6
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 3));  // 3
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 3));  // 4
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 3));  // 5
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 3));  // 6
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 4));  // 3
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 4));  // 4
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 4));  // 5
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 4));  // 6
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 5));  // 5
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 5));  // 6
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 6));  // 6
  **/
  /**
    REQUIRE_FALSE(SearchForWinner(
        student, DiskType::kPlayer1, WinningDirection::kHorizontal));  // trash
    REQUIRE_FALSE(SearchForWinner(
        student, DiskType::kPlayer1, WinningDirection::kVertical));  // trash
    REQUIRE_FALSE(SearchForWinner(
        student, DiskType::kPlayer1, WinningDirection::kLeftDiag));  // trash
  **/
  REQUIRE_FALSE(SearchForWinner(
      student, DiskType::kPlayer1, WinningDirection::kRightDiag));  // Bad #5
  REQUIRE_FALSE(SearchForWinner(
      student, DiskType::kPlayer2, WinningDirection::kVertical));  // untested
  // REQUIRE_THROWS_AS(CheckForWinner(student, DiskType::kEmpty),
  //                   std::runtime_error);  // trash
  // REQUIRE_THROWS_AS(
  //     SearchForWinner(student, DiskType::kEmpty,
  //     WinningDirection::kHorizontal), std::runtime_error);  // trash

  REQUIRE_THROWS_AS(
      DropDiskToBoard(student, DiskType::kPlayer2, 1),  // Bad #3 and #8
      std::runtime_error);

  REQUIRE(BoardLocationInBounds(0, 0));  // Bad #6

  REQUIRE(CheckForWinner(student, DiskType::kPlayer1));        // trash
  REQUIRE_FALSE(CheckForWinner(student, DiskType::kPlayer2));  // trash
}
/**
TEST_CASE("Trying Another Test", "[another]") {
  // clang-format on

  Board student;  // NOLINT
  InitBoard(student);

  DropDiskToBoard(student, DiskType::kPlayer1, 0);
  DropDiskToBoard(student, DiskType::kPlayer1, 1);
  DropDiskToBoard(student, DiskType::kPlayer1, 2);
  DropDiskToBoard(student, DiskType::kPlayer1, 6);
  DropDiskToBoard(student, DiskType::kPlayer2, 6);

  // REQUIRE_FALSE(BoardLocationInBounds(7, -6));  // trash
  // REQUIRE_FALSE(BoardLocationInBounds(-7, 6));  // trash

  REQUIRE_FALSE(SearchForWinner(
      student, DiskType::kPlayer1, WinningDirection::kHorizontal));  // Bad #
}

TEST_CASE("Yet Another Test", "[take three]") {
  Board student;  // NOLINT
  InitBoard(student);

  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 1));  // 1
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 1));  // 2
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 1));  // 3
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 1));  // 4
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 1));  // 5
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 1));  // 6
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 2));  // 2
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 2));  // 3
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 2));  // 4
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 2));  // 5
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 2));  // 6
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 3));  // 3
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 3));  // 4
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 3));  // 5
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 3));  // 6
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 4));  // 3
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 4));  // 4
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 4));  // 5
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 4));  // 6
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 5));  // 5
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 5));  // 6
  REQUIRE_NOTHROW(DropDiskToBoard(student, DiskType::kPlayer1, 6));  // 6

  REQUIRE(SearchForWinner(
      student, DiskType::kPlayer1, WinningDirection::kLeftDiag));  //
  REQUIRE(SearchForWinner(
      student, DiskType::kPlayer1, WinningDirection::kRightDiag));  //
} **/

/////////////////////////////////////////////////////////////////////////////////////////////