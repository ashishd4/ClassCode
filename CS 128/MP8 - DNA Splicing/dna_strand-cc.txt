#include "dna_strand.hpp"

#include <stdexcept>

DNAstrand::~DNAstrand() {  // done?
  while (head_ != nullptr) {
    Node* next = head_->next;
    delete head_;
    head_ = next;
  }
}

void DNAstrand::SpliceIn(const char* pattern, DNAstrand& to_splice_in) {
  if (&to_splice_in == this) { return; }  // ensuring proper parameters
  unsigned int p_length = 0;
  while (pattern[p_length] != '\0') { p_length++; }
  if (p_length == 0 || to_splice_in.head_ == nullptr) { return; }
  Node* main = head_;          // main iteration node
  Node* begin = nullptr;       // first node in the big strand to delete
  Node* main_prev = nullptr;   // node before temp, to define 'begin_prev'
  Node* begin_prev = nullptr;  // node before 'begin'
  Node* temp = main;
  while (main != nullptr) {
    temp = main;  // to define 'begin'
    for (unsigned int i = 0; i < p_length; i++) {
      if (temp == nullptr || temp->data != pattern[i]) { break; }
      if (i == p_length - 1) {
        begin_prev = main_prev;
        begin = main; }
      temp = temp->next; }
    main_prev = main;
    main = main->next; }
  if (begin == nullptr) { throw std::invalid_argument("No match"); }
  Node* other_prev = begin;  // node behind 'other_end': to delete unused strand
  Node* other_end = other_prev->next;  // first node in big strand to NOT delete
  for (unsigned int i = 0; i < p_length; i++) {
    if (other_prev == head_) {
      head_ = head_->next;
      begin = head_;
    }
    delete other_prev;
    other_prev = other_end;
    if (i != p_length - 1) { other_end = other_end->next; }
  }
  if (begin == head_) {
    to_splice_in.tail_->next = head_;
    head_ = to_splice_in.head_;
  } else {
    begin_prev->next = to_splice_in.head_;
    to_splice_in.tail_->next = other_end; }
  to_splice_in.head_ = nullptr;
  to_splice_in.tail_ = nullptr;
}
// Problems: - must adjust 'head_' and 'tail_' accordingly when necessary
//           - going to become too long (maybe just delete white spaces?)

// DELETE LATER
//  void DNAstrand::assignHead(Node* head) {
//      head_ = head;
//  }

// void DNAstrand::assignTail(Node* tail) {
//     tail_ = tail;
// }